# Factory World (setup similar to the one used in the Portuguese Robotics Open)
# Authors: Hugo Costelha
# 13/03/2013

include "pioneer.inc" # File with Pioneer models
include "map.inc" # File with map definition
include "sick.inc" # File for the sick laser

# Simulation setup
resolution 0.02 # Resolution of the underlying ray-trace model
threads 1 # Set this to the number of CPUs for increased simulation speed

# configure the GUI window
window
(
  size [ 400.000 350.000 ] # in pixels
  scale 50.0   # pixels per meter
  center [ 0  0 ]
  rotate [ 0  0 ]

  show_data 1              # 1=on 0=off
)

# load an environment bitmap
floorplan
( 
  name "factory"
  size [7.20 5.75 0.800]
  pose [0 -0.05 0 0]
  bitmap "factory.png"
  color "tan3"
)

# Lines on the floor
model (
  size [7.20 5.75 0.001] # Same as above, except for height
  gui_move 0 # Do now allow it to be moved
  gripper_return 0 # Do not allow a gripper to grab the environment
  fiducial_return 0 # Not detectable as marker
  obstacle_return 0 # Not Detectable as an obstacle
  ranger_return 0 # Not detectable by range sensors
  laser_return 0 # Not detectable by lasers

  pose [0 -0.05 0 0]
  color "black"
  bitmap "factory_lines.png"
)

#obstacle
#( 
#  name "obst1"
#  pose [2.2 1.7 0 60.0]
#  color "red"
#)

#obstacle
#( 
#  name "obst2"
#  pose [0.0 -1.3 0.0 45.0]
#  color "green"
#  bitmap "circle.png"
#)

#pioneer3dx
pioneer2dx_base_no_sonar
(
  # can refer to the robot by this name
  name "robot0"
  # Initial pose
#  pose [ -2 3 0 0 ] # Initial posture
  pose [ 0 0 0 0 ] # Initial posture

  # pioneer3dx's sonars, will be ranger:0 and the laser will be ranger:1
  sicklaser( pose [ 0 0 0 0 ] ) 

  # Simulate landmark detection
  fiducial
  (
    # fiducialfinder properties
    range_min 0.0
    range_max 8.0
    range_max_id 8.0
    fov 360

    # mode properties
    size [0 0 0]
  )

  # Uncomment if you want the robot to wander alone without your code
  #ctrl "wander"

  # Use "gps" for error-free position in world coordinates, and "odom" for
  # odometry with uniform random distributed error
  localization "odom"
  localization_origin [ 0 0 0 0 ]
  odom_error [ 0.1 0.03 0 0.2 ] # [ X Y Z Theta ]
)

# Marker definition
define marker position (
  size [0.300 0.300 0.810]
#  noise 0.10
  gui_outline 1
  gui_move 0
)

marker(
  name "marker1"
  color "cyan"
  bitmap "triangle.png"
  pose [-3.32 -2.28 0 0]
  fiducial_return 1
)

marker(
  name "marker2"
  color "yellow"
  bitmap "triangle.png"
  pose [-3.32 2.28 0 -90]
  fiducial_return 2
)

marker(
  name "marker3"
  color "blue"
  bitmap "triangle.png"
  pose [3.32 2.28 0 180]
  fiducial_return 3
)

marker(
  name "marker4"
  color "magenta"
  bitmap "triangle.png"
  pose [3.32 -2.28 0 90]
  fiducial_return 4
)
